"""Agregando dependencias internas de secciones

Revision ID: 1aec877d13f5
Revises: 980cc5d0e502
Create Date: 2025-06-24 14:50:45.260021

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector

# revision identifiers, used by Alembic.
revision: str = '1aec877d13f5'
down_revision: Union[str, Sequence[str], None] = '980cc5d0e502'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chunk',
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=False),
    sa.Column('section_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inner_dependency',
    sa.Column('section_id', sa.UUID(), nullable=False),
    sa.Column('depends_on_section_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['depends_on_section_id'], ['section.id'], ),
    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('restriction')
    op.add_column('dependency', sa.Column('section_id', sa.UUID(), nullable=True))
    op.add_column('dependency', sa.Column('depends_on_document_id', sa.UUID(), nullable=False))
    op.add_column('dependency', sa.Column('depends_on_section_id', sa.UUID(), nullable=True))
    op.drop_constraint(op.f('dependency_depends_on_id_fkey'), 'dependency', type_='foreignkey')
    op.create_foreign_key(None, 'dependency', 'section', ['section_id'], ['id'])
    op.create_foreign_key(None, 'dependency', 'section', ['depends_on_section_id'], ['id'])
    op.create_foreign_key(None, 'dependency', 'document', ['depends_on_document_id'], ['id'])
    op.drop_column('dependency', 'depends_on_id')
    op.alter_column('document', 'template_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.add_column('section', sa.Column('prompt', sa.String(), nullable=False))
    op.add_column('section', sa.Column('context_dependency_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'section', 'dependency', ['context_dependency_id'], ['id'])
    op.drop_column('section', 'base_prompt')
    op.add_column('section_execution', sa.Column('custom_output', sa.String(), nullable=True))
    op.add_column('section_execution', sa.Column('is_locked', sa.Boolean(), nullable=False))
    op.add_column('template_section', sa.Column('prompt', sa.String(), nullable=False))
    op.drop_column('template_section', 'base_prompt')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('template_section', sa.Column('base_prompt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('template_section', 'prompt')
    op.drop_column('section_execution', 'is_locked')
    op.drop_column('section_execution', 'custom_output')
    op.add_column('section', sa.Column('base_prompt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'section', type_='foreignkey')
    op.drop_column('section', 'context_dependency_id')
    op.drop_column('section', 'prompt')
    op.alter_column('document', 'template_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.add_column('dependency', sa.Column('depends_on_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'dependency', type_='foreignkey')
    op.drop_constraint(None, 'dependency', type_='foreignkey')
    op.drop_constraint(None, 'dependency', type_='foreignkey')
    op.create_foreign_key(op.f('dependency_depends_on_id_fkey'), 'dependency', 'document', ['depends_on_id'], ['id'])
    op.drop_column('dependency', 'depends_on_section_id')
    op.drop_column('dependency', 'depends_on_document_id')
    op.drop_column('dependency', 'section_id')
    op.create_table('restriction',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('section_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['section_id'], ['section.id'], name=op.f('restriction_section_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('restriction_pkey'))
    )
    op.drop_table('inner_dependency')
    op.drop_table('chunk')
    # ### end Alembic commands ###
